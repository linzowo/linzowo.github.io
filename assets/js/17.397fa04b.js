(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{563:function(t,a,n){"use strict";n.r(a);var s=n(7),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("不想看太多,请查看最后的总结选择需要的")])]),t._v(" "),n("p",[n("strong",[t._v("欢迎访问我的博客：")]),n("a",{attrs:{href:"http://linzowo.gitee.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("林除夕"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("在某个组件中只有一个路由视图区域,且各个路由组件之间不存在父子关系时,要在组件之间传递数据就不好通过父子组件传值的方式了.那么下面我们来看看怎么办吧.")]),t._v(" "),n("h2",{attrs:{id:"在页面中实现路由导航链接的两种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在页面中实现路由导航链接的两种方式"}},[t._v("#")]),t._v(" 在页面中实现路由导航链接的两种方式")]),t._v(" "),n("div",{staticClass:"language-vue extra-class"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[t._v("// 声明式  \n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-link")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("to")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-link")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n// 编程式\n// 将自定义的router模块引入\nimport router from './router.js'\nrouter.push(...)\n\n//或者\n//在vue实例中使用\nthis.$router.push\n")])])]),n("h2",{attrs:{id:"关于数据与参数的差异"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于数据与参数的差异"}},[t._v("#")]),t._v(" 关于数据与参数的差异")]),t._v(" "),n("hr"),t._v(" "),n("p",[n("strong",[t._v("为了避免理解差异导致的问题,我对数据和参数做如下规范:")])]),t._v(" "),n("ol",[n("li",[t._v("参数:\n"),n("ol",[n("li",[t._v("就是我们常说的"),n("code",[t._v("query")])]),t._v(" "),n("li",[t._v("只能是数字或者字符串")]),t._v(" "),n("li",[t._v("长度有限制")])])]),t._v(" "),n("li",[t._v("数据\n"),n("ol",[n("li",[t._v("就是我们常说的"),n("code",[t._v("params")])]),t._v(" "),n("li",[t._v("类型不限:字符串/数字/数组/对象/布尔值均可")]),t._v(" "),n("li",[t._v("长度不限")])])])]),t._v(" "),n("h2",{attrs:{id:"具体实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体实现"}},[t._v("#")]),t._v(" 具体实现")]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"_1-声明式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明式"}},[t._v("#")]),t._v(" 1.声明式")]),t._v(" "),n("div",{staticClass:"language-vue extra-class"},[n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[t._v('// 方法1\n//=========================================\n// 步骤1:引入vue-router\nimport VueRouter from "vue-router";\n\n// 步骤2:创建一个vue-router实例\nconst router = new VueRouter({\n  routes: [\n\t// 在path中指定占位符【通过 : 的形式指定】例如下面的:id\n    { path: "/home/:id", component: HomeContainer }\n  ]\n});\n\n// 如何传值: 通过在路径中指定位置传入想要的内容来传递数据到其他组件:例如下面id所在位置\n'),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-link")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("to")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/home/id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-link")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n\n// 在组件中怎么接收\n// 在组件实例对象中 this.$router.params.id 就是传递过来那个值\n// 在标签中 $router.params.id 就是传递过来那个值\n\n\n// 方法2\n==============================================\n// 注意: 1. routes参数中的name必须要设置\n// 步骤1:引入vue-router\nimport VueRouter from "vue-router";\n\n// 步骤2:创建一个vue-router实例\nconst router = new VueRouter({\n  routes: [\n    { path: "/home", name: \'home\', component: HomeContainer }\n  ]\n});\n\n// 步骤3:注意这里的name如果不在步骤2中声明这里是无法找到对应选项的(会报错)\n'),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-link")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":to")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{name: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("home"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(", query: {index:index},params: { data: data}}"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-link")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n// 步骤4:\n// 接收这个值==>在上面我们看到这种方式可以传递query和params两种类型的参数,我们都可以在$router.params中找到,只需要通过 . 来调用对应的键就能得到值了\n// 在组件实例对象中 this.$router.params.键 就是传递过来那个值\n// 在标签中 $router.params.键 就是传递过来那个值\n\n\n")])])]),n("h3",{attrs:{id:"_2-函数式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数式"}},[t._v("#")]),t._v(" 2.函数式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 注意: 1. routes参数中的name必须要设置\n// 步骤1:引入vue-router\nimport VueRouter from \"vue-router\";\n\n// 步骤2:创建一个vue-router实例\nconst router = new VueRouter({\n  routes: [\n    { path: \"/home\", name: 'home', component: HomeContainer }\n  ]\n});\n\n// 步骤3:在js中通过代码的方式发起路由跳转并传递参数或数据\n\n// 传递数据\nrouter.push(name: 'home', params: { data: data })\n\n// 传递参数\nrouter.push({ path: '/home', query: { index: index }})\nrouter.push({ path: `/home/${index}` })\n\n// 特别注意: 如果传递path那么默认的 会将 params 忽略,就是说你就算传了也没有用,所以在使用params传递数据的时候一定要注意,不能使用path,只能使用name来指定路由的目标对象\n\n\n// 步骤4:\n// 接收这个值===>与声明式没有太大差异\n// 在组件实例对象中 this.$router.params.键 就是传递过来那个值\n// 在标签中 $router.params.键 就是传递过来那个值\n")])])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("hr"),t._v(" "),n("ol",[n("li",[t._v("通过对比可以知道两种方式都可以传递"),n("code",[t._v("参数")]),t._v("和"),n("code",[t._v("数据")])]),t._v(" "),n("li",[t._v("如果要在js代码中处理某些数据,处理完成后就跳转路由==>使用编程式")]),t._v(" "),n("li",[t._v("如果要通过某些已经绑定了数据的元素进行跳转==>声明式")]),t._v(" "),n("li",[t._v("按需选择")])])])}),[],!1,null,null,null);a.default=r.exports}}]);